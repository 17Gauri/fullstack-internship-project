<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>User Management System</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <style>
        body {
            background: linear-gradient(to right, #e0eafc, #cfdef3);
            padding: 20px;
            font-family: 'Poppins', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #333;
        }
        h1 { text-align: center; margin-bottom: 30px; color: #2c3e50; font-weight: 700; }
        .tab { cursor: pointer; padding: 12px 20px; background: #3498db; color: white; display: inline-block; margin-right: 10px; border-radius: 8px; margin-bottom: 20px; transition: background 0.3s; font-weight: 500; }
        .tab:hover { background: #2980b9; }
        .tab.active { background: #2c3e50; }
        .form-section, .users-section, .manage-section { display: none; animation: fadeIn 0.5s ease-in-out; }
        .form-section.active, .users-section.active, .manage-section.active { display: block; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .card-form { background: #fff; border-radius: 12px; box-shadow: 0 8px 16px rgba(0,0,0,0.1); padding: 25px 30px; max-width: 600px; margin: auto; }
        .btn-submit { background: #27ae60; color: white; border: none; border-radius: 6px; padding: 12px; font-size: 16px; font-weight: 600; transition: background 0.3s; }
        .btn-submit:hover { background: #1e8449; }
        .success-popup { margin: 20px auto; padding: 15px; max-width: 600px; background: #dff9fb; color: #27ae60; border: 1px solid #c8f7f7; border-radius: 10px; text-align: center; font-size: 16px; font-weight: 600; box-shadow: 0 4px 10px rgba(0,0,0,0.1); opacity: 1; transition: opacity 0.5s ease-out; }
        .success-popup.fade-out { opacity: 0; }
        .table { background: #fff; border-radius: 12px; overflow: hidden; box-shadow: 0 8px 16px rgba(0,0,0,0.1); }
        .table thead { background: #2c3e50; color: white; }
        .table td, .table th { padding: 14px; }
        .btn-action { margin-right: 8px; }
    </style>
</head>

<body>

<h1>User Management System</h1>

<% if (submittedData) { %>
    <div class="success-popup" id="successPopup">
        üéâ Successfully submitted <strong><%= submittedData.username %></strong>!
    </div>
<% } %>

<div class="tabs mb-3 text-center">
    <div class="tab active" onclick="showPage('formPage')">Register User</div>
    <div class="tab" onclick="showPage('usersPage')">View All Users</div>
    <div class="tab" onclick="showPage('managePage')">Manage Users</div>
</div>

<!-- Register User Section -->
<div id="formPage" class="form-section active">
    <form id="registerForm" class="card-form needs-validation" novalidate>
        <div class="mb-3">
            <label for="username" class="form-label">Name:</label>
            <input type="text" id="username" name="username" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input type="email" id="email" name="email" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="age" class="form-label">Age:</label>
            <input type="number" id="age" name="age" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="gender" class="form-label">Gender:</label>
            <select id="gender" name="gender" class="form-select" required>
                <option value="">Select gender</option>
                <option>Male</option>
                <option>Female</option>
                <option>Other</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <input type="password" id="password" name="password" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-submit w-100">Submit</button>
    </form>
</div>

<!-- View All Users Section -->
<div id="usersPage" class="users-section">
    <h2 class="text-center mb-4">All Users</h2>
    <div id="usersTable"></div>
</div>

<!-- Manage Users Section -->
<div id="managePage" class="manage-section">
    <h2 class="text-center mb-4">Manage Users</h2>

    <!-- Task 7 Button -->
    <div class="text-center mb-4">
        <button class="btn btn-primary" onclick="loadJoke()">Get Random Joke </button>
        <div id="jokeDisplay" class="mt-3 text-danger"></div>
    </div>

    <div id="manageTable"></div>
</div>

<script>
    function showPage(pageId) {
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('.form-section, .users-section, .manage-section').forEach(section => section.classList.remove('active'));

        if (pageId === 'formPage') {
            document.querySelector('.tab:nth-child(1)').classList.add('active');
            document.getElementById('formPage').classList.add('active');
        } else if (pageId === 'usersPage') {
            document.querySelector('.tab:nth-child(2)').classList.add('active');
            document.getElementById('usersPage').classList.add('active');
            loadUsersTable();
        } else {
            document.querySelector('.tab:nth-child(3)').classList.add('active');
            document.getElementById('managePage').classList.add('active');
            loadManageTable();
        }
    }

    async function loadUsersTable() {
        const response = await fetch('/api/users');
        const users = await response.json();

        let html = '';
        if (users.length > 0) {
            html += `<table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Name</th><th>Email</th><th>Age</th><th>Gender</th>
                    </tr>
                </thead>
                <tbody>`;
            users.forEach(user => {
                html += `<tr>
                    <td>${user.username}</td>
                    <td>${user.email}</td>
                    <td>${user.age}</td>
                    <td>${user.gender}</td>
                </tr>`;
            });
            html += `</tbody></table>`;
        } else {
            html = '<p class="text-center">No users submitted yet.</p>';
        }

        document.getElementById('usersTable').innerHTML = html;
    }

    async function loadManageTable() {
        const response = await fetch('/api/users');
        const users = await response.json();

        let html = '';
        if (users.length > 0) {
            html += `<table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Name</th><th>Email</th><th>Age</th><th>Gender</th><th>Actions</th>
                    </tr>
                </thead>
                <tbody>`;
            users.forEach(user => {
                const safeId = user.email.replace(/[@.]/g, '_');
                html += `<tr id="row-${safeId}">
                    <td><input type="text" value="${user.username}" class="form-control" id="name-${safeId}"></td>
                    <td>${user.email}</td>
                    <td><input type="number" value="${user.age}" class="form-control" id="age-${safeId}"></td>
                    <td>
                        <select class="form-select" id="gender-${safeId}">
                            <option ${user.gender === 'Male' ? 'selected' : ''}>Male</option>
                            <option ${user.gender === 'Female' ? 'selected' : ''}>Female</option>
                            <option ${user.gender === 'Other' ? 'selected' : ''}>Other</option>
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-success btn-action" onclick="updateUser('${user.email}')">Update</button>
                        <button class="btn btn-danger btn-action" onclick="deleteUser('${user.email}')">Delete</button>
                    </td>
                </tr>`;
            });
            html += `</tbody></table>`;
        } else {
            html = '<p class="text-center">No users available to manage.</p>';
        }

        document.getElementById('manageTable').innerHTML = html;
    }

    async function deleteUser(email) {
        await fetch(`/api/users/${encodeURIComponent(email)}`, { method: 'DELETE' });
        alert('User deleted!');
        loadManageTable();
    }

    async function updateUser(email) {
        const safeId = email.replace(/[@.]/g, '_');
        const username = document.getElementById(`name-${safeId}`).value;
        const age = document.getElementById(`age-${safeId}`).value;
        const gender = document.getElementById(`gender-${safeId}`).value;

        await fetch(`/api/users/${encodeURIComponent(email)}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username, age, gender, password: 'dummy' })
        });

        alert('User updated!');
    }

    async function loadJoke() {
        const display = document.getElementById('jokeDisplay');
        display.innerHTML = 'Loading joke...';

        try {
            const response = await fetch('/api/joke');
            if (!response.ok) throw new Error('Failed to fetch joke');

            const joke = await response.json();
            display.innerHTML = `<span class="text-success">üòÇ ${joke.setup} ‚Äî ${joke.punchline}</span>`;
        } catch (err) {
            console.error('Error:', err);
            display.innerHTML = '<span class="text-danger">‚ùå Error loading joke.</span>';
        }
    }

    window.onload = function() {
        const popup = document.getElementById('successPopup');
        if (popup) {
            setTimeout(() => { popup.classList.add('fade-out'); }, 3000);
        }

        const registerForm = document.getElementById('registerForm');
        if (registerForm) {
            registerForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = {
                    username: this.username.value,
                    email: this.email.value,
                    age: this.age.value,
                    gender: this.gender.value,
                    password: this.password.value
                };

                const response = await fetch('/api/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    alert('‚úÖ User registered successfully!');
                    this.reset();
                    loadUsersTable();
                    loadManageTable();
                } else {
                    const result = await response.json();
                    alert('‚ùå Error: ' + result.message);
                }
            });
        }
    };
</script>

</body>
</html>
